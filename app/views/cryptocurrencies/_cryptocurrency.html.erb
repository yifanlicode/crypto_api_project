<div id="<%= dom_id cryptocurrency %>" class="card">
  <div class="card-header bg-secondary text-white">
    <h3 class="card-title">
      <%= image_tag cryptocurrency.icon_url, class: "img-fluid img-coin" %>
      <%= cryptocurrency.name %>
    </h3>
  </div>
  <div class="card-body">
    <p class="card-text">
      <strong>Rank:</strong> <%= cryptocurrency.rank %>
    </p>
    <p class="card-text">
      <strong>Price:</strong> $<%= number_with_precision(cryptocurrency.price, precision: 2) %>
    </p>
    <p class="card-text">
      <strong>Change:</strong>
      <span class="<%= cryptocurrency.change.to_f.negative? ? 'text-danger' : 'text-success' %>"><%= cryptocurrency.change %>%</span>
    </p>
    <p class="card-text">
      <strong>24h Volume:</strong> $<%= number_with_delimiter(cryptocurrency.volume_24h) %>
    </p>
    <p class="card-text">
      <strong>Market Cap:</strong> $<%= number_with_delimiter(cryptocurrency.market_cap) %>
    </p>

    <%# sparkline %>
    <div class="chart-container" style="width: 800px; height: 200px;">
      <strong>Last 20 days:</strong>
      <canvas id="sparkline-<%= dom_id @cryptocurrency %>"></canvas>
    </div>
  </div>

  <%# Show sparkline with Chart.js %>
  <script type="text/javascript">
    const ctx = document.getElementById("sparkline-<%= dom_id @cryptocurrency %>").getContext('2d');
    const data = <%= @sparkline_data.to_json.html_safe %>;

    var chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: Array.from({ length: data.length }, (_, i) => ''),
        datasets: [{
          label: 'Price',
          data: data,
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            display: false
          },
          y: {
            display: false,
            ticks: {
              callback: function (value, index, values) {
                // Convert large numbers to abbreviated format
                const abbreviations = ['K', 'M', 'B', 'T'];
                let newValue = value;
                let suffix = '';
                if (newValue >= 1000) {
                  const suffixIndex = Math.floor(Math.log10(newValue) / 3);
                  newValue /= 1000 ** suffixIndex;
                  suffix = abbreviations[suffixIndex - 1];
                }
                return newValue + suffix;
              }
            },
            min: Math.min(...data) * 0.95,
            max: Math.max(...data) * 1.05
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false
          }
        }
      }
    });
  </script>
</div>


